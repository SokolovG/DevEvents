services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: src/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  init_migrations:
    build:
      context: .
      dockerfile: src/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env
    command: ["python", "-m", "alembic", "stamp", "base"]

  migrations:
    build:
      context: .
      dockerfile: src/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env
    command: ["python", "-m", "alembic", "revision", "--autogenerate"]

  run_migrations:
    build:
      context: .
      dockerfile: src/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env
    command: ["python", "-m", "alembic", "upgrade", "head"]

volumes:
  postgres_data:
